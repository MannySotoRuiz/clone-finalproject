// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  businesses    Business[]
  createdAt     DateTime   @default(now())
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Business {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  category   String
  price      String
  aboutMe    String
  pictures   String[]
  fiveStars  Int      @default(0)
  fourStars  Int      @default(0)
  threeStars Int      @default(0)
  twoStars   Int      @default(0)
  oneStars   Int      @default(0)
  reviews    Review[]
  userId     String   @db.ObjectId
  User       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model Review {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  reviewerId        String    @db.ObjectId
  reviewerFirstName String
  reviewMessage     String
  rating            Int
  pictures          String[]
  Business          Business? @relation(fields: [businessId], references: [id])
  businessId        String?   @db.ObjectId
  createdAt         DateTime  @default(now())
}
